SylixOS 进程说明

SylixOS 是支持多进程的实时操作系统, 为了实现实时性特点, SylixOS 的进程类似于 VxWorks6.0 之后的 RTP 进程与 uClinux 的进程, 所有的进程运行在一个统一的进程虚拟空间.

这个虚拟空间详见 VMM 管理器. SylixOS 的进程实际上是一个资源的容器, 包括程序代码(包括依赖的动态链接库), 数据段, 内存, 内核对象, 文件, posix 对象等等. 

当进程结束时, 如果存在父系进程, 则通过父系进程调用 wait/waitpid 将进程内没有回收的资源一并回收, 如果进程是孤儿进程, 则进程结束后资源统一由内核资源回收器回收

需要说明的是, 当父进程在结束时没有调用 wait 系列函数, 导致提早完成的子进程资源无法得到回收成为僵尸进程, 系统此时会立即接管僵尸进程并加以回收. 不会浪费系统资源

由于 SylixOS 内核为实时内核, 并是不 linux 系统内样, 所以进程的退出方式比较特殊, 必须等待所有的进程内线程结束后, 进程主线程会 SIGCHLD 通知父系线程, 子进程已结束

exec 系列函数只能在进程主线程内调用, 这时主线程等待进程内所有线程结束同时回收资源在同样的进程控制块下, 运行新的文件, 进程 pid 和 pgid 并不会产生任何变化.



由于进程在结束时需要回收资源, 所以操作系统分配资源时将会标记对应进程已经分配的资源, 当进程退出时, 本进程创建出的资源如果没有 LW_OPTION_OBJECT_GLOBAL 选项, 则此资源将被回收

所以驱动程序中如果有些资源是全局属性的, 创建时一定要加入 LW_OPTION_OBJECT_GLOBAL 选项, 这样就能避免进程结束时此资源被资源回收器回收.

关于进程文件描述符:

1.0.0.rc36 版本后, 系统支持每一个进程有自己独立的文件描述符管理, 如果这个进程是系统创建的(没有父亲进程), 则这个进程的初始文件描述符表就是从系统文件描述符表

完全 dup 出来的, 如果存在父系进程, 则这个系统的文件描述符表是由父系进程中 dup 继承出来的, 当然如果文件带有 FD_CLOEXE 属性则不继承, 

可以通过 /proc/${pid}/filedesc 文件查看当前进程的所有文件描述符情况. 