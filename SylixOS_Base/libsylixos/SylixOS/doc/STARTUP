10:59 2009-9-29

--SylixOS--

  SylixOS 系统的启动总体分为 3 步:

1. 系统复位, 程序从复位向量处开始运行, 此时运行的为启动代码, 主要负责初始化关键性运行环境, 

   如: CPU 运行模式, 堆栈, 中断系统, 总线系统等等, 

2: 初始化 C 程序运行环境, 例如: DATA BSS 段数据的初始化等等.

3: 进入 bspInit.c 文件中的 bspInit 或 main() 函数. 在 bspInit() 或 main() 函数中做一些必要的处理, 就可以开始操作系统的

   初始化了.

   SylixOS 操作系统初始化总体也分为 3 步: (如需要, 可首先设置内核启动参数)

1: 关键性运行环境数据搭建, 程序进入 API_KernelStart() 后立即进行此项工作, 当操作系统关键性环境初始化

   完成后, 系统将根据内核配置创建相关内核守护任务 (同时也自动初始化了 C++ 运行环境).

2: 创建完内核任务后, 系统将控制权转交给 pStartHook 回调, 由用户初始化相关功能. 例如: 初始化 VMM 系统.

   (注意, 此时操作系统并没有开始运行, 在 pStartHook 执行完毕后, 操作系统开始多任务调度)

3: 由 t_boot 任务 (pStartHook 负责创建此任务) 负责初始化所有系统资源. 然后创建 t_main(), 将系统控制权转交

   给用户.

   pStartHook 范例工作如下:

   1. 初始化 t_idle 任务回调. (可用于低功耗系统)

   2. 初始化操作系统时间库, 包括时区.
   
   3. 初始化 FPU 控制器.

   4. 初始化 MMU 创建内存分页.

   5. 初始化 CACHE (注意: 支持 MMU 的系统必须先初始化 MMU 再初始化 CACHE)

   6: 创建 t_boot 任务进行多任务状态初始化.

   
   t_boot 任务工作如下:

   1: 初始化 shell 系统 (建议在 t_boot 的首先初始化 shell 系统, 因为有些子系统需要使用环境变量等 shell 提供的功能. 例如 framebuffer 接口)

   2: 初始化总线子系统库

   3: 初始化驱动函数库 

   4: 创建系统设备 (注意:必须第一个调用 rootFsDevCreate() 创建根文件系统, rootFs 会自动创建 /dev 目录以便安装设备.
                         这样操作系统才能挂载其他的设备, 同时建议手动调用 mkdir("/dev/input") 以便挂载键盘, 鼠标或触摸屏等输入设备)

   5: 初始化标准文件

   6: 初始化日志系统

   7: 初始化网络系统

   8: 链接默认网络接口

   9: 初始化 posix 兼容系统工作环境

  10: 初始化符号表服务

  11: 初始化程序装载器
  
  12: 初始化内核监控器

  13: 创建 t_main 任务
