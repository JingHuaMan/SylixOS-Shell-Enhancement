;/*********************************************************************************************************
;**
;**                                    中国软件开源组织
;**
;**                                   嵌入式实时操作系统
;**
;**                                SylixOS(TM)  LW : long wing
;**
;**                               Copyright All Rights Reserved
;**
;**--------------文件信息--------------------------------------------------------------------------------
;**
;** 文   件   名: mips64.S
;**
;** 创   建   人: Jiao.JinXing (焦进星)
;**
;** 文件创建日期: 2016 年 10 月 31 日
;**
;** 描        述: MIPS64 体系架构相关汇编函数库.
;*********************************************************************************************************/

#ifndef ASSEMBLY
#define ASSEMBLY 1
#endif

#include <arch/assembler.h>

;/*********************************************************************************************************
;  MIPS64 体系架构处理器 32 位模式才需要如下函数
;*********************************************************************************************************/

#if LW_CFG_CPU_WORD_LENGHT == 32

    FILE_BEGIN()

;/*********************************************************************************************************
;  导出符号
;*********************************************************************************************************/

    EXPORT_LABEL(mips64Read8)
    EXPORT_LABEL(mips64Read16)
    EXPORT_LABEL(mips64Read32)
    EXPORT_LABEL(mips64Read64)

    EXPORT_LABEL(mips64Write8)
    EXPORT_LABEL(mips64Write16)
    EXPORT_LABEL(mips64Write32)
    EXPORT_LABEL(mips64Write64)

;/*********************************************************************************************************
;  使能 64 位地址模式
;*********************************************************************************************************/

MACRO_DEF(MIPS64_ENABLE64)
    MFC0_EHB(T0, CP0_STATUS)                                            ;/*  T0 = 原 CP0 状态寄存器      */
    ;/*
    ; * 必须置上 ST0_KX | ST0_SX | ST0_UX, 才能访问全部的 64 位空间(xuseg xsseg xkseg)
    ; * 否则可能触发 Address error 异常
    ; */
    ORI     T1 , T0 , (ST0_KX | ST0_SX | ST0_UX)                        ;/*  可以用较大地址空间          */
    AND     T1 , T1 , ~ST0_IE                                           ;/*  禁止中断                    */
    MTC0_EHB(T1, CP0_STATUS)
    .set    mips64
    MACRO_END()

;/*********************************************************************************************************
;  恢复原来的地址模式
;*********************************************************************************************************/

MACRO_DEF(MIPS64_RESUME32)
    MTC0_EHB(T0, CP0_STATUS)                                            ;/*  恢复原 CP0 状态寄存器       */
    .set    mips32
    MACRO_END()

;/*********************************************************************************************************
;  两个 32 位地址参数(A0, A1)合并成一个 64 位地址参数(A0)
;*********************************************************************************************************/

MACRO_DEF(MIPS64_READ_ADDR_MERGE)
    DSLL    A1 , A1 , 32
    AND     A0 , A0 , 0xffffffff
    OR      A0 , A0 , A1
    MACRO_END()

;/*********************************************************************************************************
;  读 64 位地址中的 8 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Read8)
    MIPS64_ENABLE64

    MIPS64_READ_ADDR_MERGE

    LB      V0 , 0(A0)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Read8)

;/*********************************************************************************************************
;  读 64 位地址中的 16 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Read16)
    MIPS64_ENABLE64

    MIPS64_READ_ADDR_MERGE

    LH      V0 , 0(A0)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Read16)

;/*********************************************************************************************************
;  读 64 位地址中的 32 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Read32)
    MIPS64_ENABLE64

    MIPS64_READ_ADDR_MERGE

    LW      V0 , 0(A0)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Read32)

;/*********************************************************************************************************
;  读 64 位地址中的 64 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Read64)
    MIPS64_ENABLE64

    MIPS64_READ_ADDR_MERGE

    LD      V0 , 0(A0)
    DSRL    V1 , V0 , 32

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Read64)

;/*********************************************************************************************************
;  两个 32 位地址参数(A2,A3)合并成一个 64 位地址参数(A2)
;*********************************************************************************************************/

MACRO_DEF(MIPS64_WRITE_ADDR_MERGE)
    DSLL    A3 , A3 , 32
    AND     A2 , A2 , 0xffffffff
    OR      A2 , A2 , A3
    MACRO_END()

;/*********************************************************************************************************
;  两个 32 位数据参数(A0,A1)合并成一个 64 位地址参数(A0)
;*********************************************************************************************************/

MACRO_DEF(MIPS64_WRITE_DATA_MERGE)
    DSLL    A1 , A1 , 32
    AND     A0 , A0 , 0xffffffff
    OR      A0 , A0 , A1
    MACRO_END()

;/*********************************************************************************************************
;  写 64 位地址中的 8 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Write8)
    MIPS64_ENABLE64

    MIPS64_WRITE_ADDR_MERGE

    SB      A0 , 0(A2)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Write8)

;/********************************************************************************************************
;  写 64 位地址中的 16 位数据
;********************************************************************************************************/

FUNC_DEF(mips64Write16)
    MIPS64_ENABLE64

    MIPS64_WRITE_ADDR_MERGE

    SH      A0 , 0(A2)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Write16)

;/*********************************************************************************************************
;  写 64 位地址中的 32 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Write32)
    MIPS64_ENABLE64

    MIPS64_WRITE_ADDR_MERGE

    SW      A0 , 0(A2)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Write32)

;/*********************************************************************************************************
;  写 64 位地址中的 64 位数据
;*********************************************************************************************************/

FUNC_DEF(mips64Write64)
    MIPS64_ENABLE64

    MIPS64_WRITE_ADDR_MERGE

    MIPS64_WRITE_DATA_MERGE

    SD      A0 , 0(A2)

    MIPS64_RESUME32

    JR      RA
    NOP
    FUNC_END(mips64Write64)

    FILE_END()

#endif
;/*********************************************************************************************************
;  END
;*********************************************************************************************************/
