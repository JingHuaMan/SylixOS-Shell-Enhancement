;/*********************************************************************************************************
;**
;**                                    中国软件开源组织
;**
;**                                   嵌入式实时操作系统
;**
;**                                       SylixOS(TM)
;**
;**                               Copyright  All Rights Reserved
;**
;**--------------文件信息--------------------------------------------------------------------------------
;**
;** 文   件   名: fp_asm.S
;**
;** 创   建   人: Jiao.JinXing (焦进星)
;**
;** 文件创建日期: 2018 年 08 月 29 日
;**
;** 描        述: RISC-V 体系架构 FPU 支持.
;*********************************************************************************************************/

#ifndef ASSEMBLY
#define ASSEMBLY 1
#endif

#include <arch/assembler.h>

#if LW_CFG_RISCV_M_LEVEL > 0
#if LW_CFG_CPU_FPU_EN > 0

;/*********************************************************************************************************
;  A0 寄存器的指令编码
;*********************************************************************************************************/

#define RISCV_A0    10

;/*********************************************************************************************************
;  FLD FSD 指令
;*********************************************************************************************************/

#define RISCV_FLD(rd, offset, rs1) \
    .word   ((offset << 20) | (rs1 << 15) | (0x3 << 12) | (rd << 7) | 0x7)

#define RISCV_FSD(rs2, offset, rs1) \
    .word   (((offset >> 5) << 25) | (rs2 << 20) | (rs1 << 15) | (0x3 << 12) | ((offset & 0x1f) << 7) | 0x27)

;/*********************************************************************************************************
;  FMV.X.S FMV.S.X 指令
;*********************************************************************************************************/

#define RISCV_FMV_X_S_A0(which) \
    .word   (0xe0000553 + (((which) * 8) << 12))

#define RISCV_FMV_S_X_A0(which) \
    .word   (0xf0050053 + (((which) * 8) << 4))

;/*********************************************************************************************************
;  FMV.X.D FMV.S.D 指令
;*********************************************************************************************************/

#define RISCV_FMV_X_D_A0(which) \
    .word   (0xe2000553 + (((which) * 8) << 12))

#define RISCV_FMV_D_X_A0(which) \
    .word   (0xf2050053 + (((which) * 8) << 4))

;/*********************************************************************************************************
;  get_f32 put_f32
;*********************************************************************************************************/

#define get_f32(which)  .align 1; RISCV_FMV_X_S_A0(which); jr t0
#define put_f32(which)  .align 1; RISCV_FMV_S_X_A0(which); jr t0

;/*********************************************************************************************************
;  get_f64 put_f64
;*********************************************************************************************************/

#if __riscv_xlen == 64
# define get_f64(which) .align 1; RISCV_FMV_X_D_A0(which); jr t0
# define put_f64(which) .align 1; RISCV_FMV_D_X_A0(which); jr t0
#else
# define get_f64(which) .align 1; RISCV_FSD(which, 0, RISCV_A0); jr t0
# define put_f64(which) .align 1; RISCV_FLD(which, 0, RISCV_A0); jr t0
#endif

  .text
  .option norvc
  .globl get_f32_reg
  get_f32_reg:
    get_f32(0)
    get_f32(1)
    get_f32(2)
    get_f32(3)
    get_f32(4)
    get_f32(5)
    get_f32(6)
    get_f32(7)
    get_f32(8)
    get_f32(9)
    get_f32(10)
    get_f32(11)
    get_f32(12)
    get_f32(13)
    get_f32(14)
    get_f32(15)
    get_f32(16)
    get_f32(17)
    get_f32(18)
    get_f32(19)
    get_f32(20)
    get_f32(21)
    get_f32(22)
    get_f32(23)
    get_f32(24)
    get_f32(25)
    get_f32(26)
    get_f32(27)
    get_f32(28)
    get_f32(29)
    get_f32(30)
    get_f32(31)
  
  .text
  .globl put_f32_reg
  put_f32_reg:
    put_f32(0)
    put_f32(1)
    put_f32(2)
    put_f32(3)
    put_f32(4)
    put_f32(5)
    put_f32(6)
    put_f32(7)
    put_f32(8)
    put_f32(9)
    put_f32(10)
    put_f32(11)
    put_f32(12)
    put_f32(13)
    put_f32(14)
    put_f32(15)
    put_f32(16)
    put_f32(17)
    put_f32(18)
    put_f32(19)
    put_f32(20)
    put_f32(21)
    put_f32(22)
    put_f32(23)
    put_f32(24)
    put_f32(25)
    put_f32(26)
    put_f32(27)
    put_f32(28)
    put_f32(29)
    put_f32(30)
    put_f32(31)
  
  .text
  .globl get_f64_reg
  get_f64_reg:
    get_f64(0)
    get_f64(1)
    get_f64(2)
    get_f64(3)
    get_f64(4)
    get_f64(5)
    get_f64(6)
    get_f64(7)
    get_f64(8)
    get_f64(9)
    get_f64(10)
    get_f64(11)
    get_f64(12)
    get_f64(13)
    get_f64(14)
    get_f64(15)
    get_f64(16)
    get_f64(17)
    get_f64(18)
    get_f64(19)
    get_f64(20)
    get_f64(21)
    get_f64(22)
    get_f64(23)
    get_f64(24)
    get_f64(25)
    get_f64(26)
    get_f64(27)
    get_f64(28)
    get_f64(29)
    get_f64(30)
    get_f64(31)
  
  .text
  .globl put_f64_reg
  put_f64_reg:
    put_f64(0)
    put_f64(1)
    put_f64(2)
    put_f64(3)
    put_f64(4)
    put_f64(5)
    put_f64(6)
    put_f64(7)
    put_f64(8)
    put_f64(9)
    put_f64(10)
    put_f64(11)
    put_f64(12)
    put_f64(13)
    put_f64(14)
    put_f64(15)
    put_f64(16)
    put_f64(17)
    put_f64(18)
    put_f64(19)
    put_f64(20)
    put_f64(21)
    put_f64(22)
    put_f64(23)
    put_f64(24)
    put_f64(25)
    put_f64(26)
    put_f64(27)
    put_f64(28)
    put_f64(29)
    put_f64(30)
    put_f64(31)

#endif
#endif
;/*********************************************************************************************************
;  END
;*********************************************************************************************************/
