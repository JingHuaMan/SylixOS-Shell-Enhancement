/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                   嵌入式实时操作系统
**
**                                SylixOS(TM)  LW : long wing
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: cppEabiLib.cpp
**
** 创   建   人: Han.Hui (韩辉)
**
** 文件创建日期: 2011 年 03 月 07 日
**
** 描        述: 操作系统平台 C++ run time eabi(ARM) lib. 
                 See http://www.codesourcery.com/public/cxx-abi/abi.html.
                 
** BUG:
2013.05.21  不再定义 __dso_handle. 每一个动态库都应该自己包含此符号 (__dso_handle = &__dso_handle)
            以保持在每一个动态库中 __dso_handle 均为自己唯一的编号.
*********************************************************************************************************/
#include "SylixOS.h"
/*********************************************************************************************************
  C 环境函数
*********************************************************************************************************/
extern "C" {
/*********************************************************************************************************
  CXA 函数声明
*********************************************************************************************************/
extern int  __cxa_atexit(void (*f)(void *), void *p, void *d);
/*********************************************************************************************************
  Temporary hack: this variable should not be part of the C library
  itself, but placed in the .bss section of each executable or
  shared library instead.
  
  We keep it here temporarily until the build system has been
  modified properly to use crtbegin_so.S and crtend_so.S when
  generating shared libraries.
  
  It must be a 'weak' symbol to avoid conflicts with the definitions
  that have been moved to crtbegin_static.S and crtbegin_dynamic.S
  
  For the record, it is used for static C++ object construction
  and destruction. See http://www.codesourcery.com/public/cxx-abi/abi.html#dso-dtor
*********************************************************************************************************/
/*********************************************************************************************************
  C++ 对象分为三类: 全局对象, 静态局部对象, 动态对象
  
  全局对象:类似于 C 程序中的全局变量, 一般在 main 程序执行前, 需要初始化全局变量. 同样, C++ 程序要求在运行
  第一个 C++ 程序前, 必须构造所有的全局对象, 编译器会把所有 C++ 全局对象构造函数以函数指针表的方式放在以下
  节区: .ctors .ctors.* .preinit_array .init_array 中. SylixOS 系统在执行用户程序之前会自动调用 
  __cppRtDoCtors() 函数来执行所有的全局对象构造函数(详情请参见相关代码).
  同样, 在应用程序退出时需要析构所有全局对象, 这里有两种可能性:
  
  第一: 编译器会把所有 C++ 全局对象析构函数以函数指针表的方式放在以下节区: .dtors .dtors.* .fini_array 中. 
  与构造类似, 由于 SylixOS 本身就是一个进程, 所以 SylixOS 系统在停止时将自动调用 __cppRtDoDtors 函数来执行
  所有的全局对象析构函数.
  第二: 编译器会自动在构造函数后添加一部分代码, 功能是: 执行完构造函数, 如果对象存在析构函数, 将析构函数
  通过 __aeabi_atexit 压入 atexit() 栈区, 所以 SylixOS 系统在停止时将自动调用 __cxa_finalize() 函数, 执行
  所有对象的析构函数.
  
  静态局部对象:(函数请参考 cppSupLib.cpp 中事例)是在第一次调用容器函数时被构造, 构造完毕后会将改对象的析构
  函数通过 __aeabi_atexit 压入 atexit() 栈区, SylixOS 系统在停止时将自动调用 __cxa_finalize() 函数, 执行
  所有对象的析构函数.
  
  动态对象:是通过执行 new 和 delete 操作来隐形的执行构造和析构函数的, 操作系统并没有特殊的处理.
*********************************************************************************************************/
/*********************************************************************************************************
  SylixOS 模块装载器, 装载 C++ 程序时相关处理过程.
  
  以上所说的是针对于与 SylixOS 操作系统镜像同时运行的 C++ 程序处理办法, 如果使用模块(或执行程序)的方式装载
  外部 C++ 程序时, SylixOS loader 做了很多额外的处理, 首先 SylixOS 会分析需要运行的 elf 文件, 将相关的构造
  函数节区内的所有有效函数全部执行, 然后, 在退出(或删除)模块时, SylixOS 会将相关 elf 文件所有析构函数节区
  内的所有有效函数全部运行. 
  
  对于静态局部对象的处理, 由于模块程序需要在模块卸载时清除掉所有模块生成的数据, 所以相关的模块执行完毕后
  SylixOS 会执行一个特殊的操作, 来执行本模块 C++ 程序静态局部对象的析构函数.
  
  方法如下:
  操作系统在停止运行(或重启)之前会调用 __cxa_finalize(NULL) 来运行所有 atexit() 析构函数, 同样, 模块在卸载
  之前会调用 __cxa_module_finalize(base, size) 来卸载函数指针在模块程序内存范围内的 atexit() 节点.
  其中 base 为动态库代码段起始地址, size 为代码段大小.
*********************************************************************************************************/
/*********************************************************************************************************
** 函数名称: __aeabi_atexit
** 功能描述: eabi 设置 __cxa_finalize 时需要运行的回调方法. 
** 输　入  : fdestructor        函数指针
**           object             参数
**           dso_handle         句柄
** 输　出  : 0: 成功  -1:失败
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
int __attribute__((weak)) __aeabi_atexit (void *object, void (*fdestructor) (void *), void *dso_handle)
{
    return  __cxa_atexit(fdestructor, object, dso_handle);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memcpy8
** 功能描述: lib_memcpy
** 输　入  : dest      目标
**           src       源
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memcpy8 (void *dest, const void *src, size_t n) 
{
    lib_memcpy(dest, src, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memcpy4
** 功能描述: lib_memcpy
** 输　入  : dest      目标
**           src       源
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memcpy4 (void *dest, const void *src, size_t n) 
{
    lib_memcpy(dest, src, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memcpy
** 功能描述: lib_memcpy
** 输　入  : dest      目标
**           src       源
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memcpy (void *dest, const void *src, size_t n) 
{
    lib_memcpy(dest, src, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memmove8
** 功能描述: lib_memmove (sylixos memove is like memcpy)
** 输　入  : dest      目标
**           src       源
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memmove8 (void *dest, const void *src, size_t n) 
{
    lib_memcpy(dest, src, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memmove4
** 功能描述: lib_memmove (sylixos memove is like memcpy)
** 输　入  : dest      目标
**           src       源
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memmove4 (void *dest, const void *src, size_t n) 
{
    lib_memcpy(dest, src, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memmove
** 功能描述: lib_memmove (sylixos memove is like memcpy)
** 输　入  : dest      目标
**           src       源
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memmove (void *dest, const void *src, size_t n) 
{
    lib_memcpy(dest, src, n);
}
/*********************************************************************************************************
 __aeabi_memset has the order of its second and third arguments reversed.
 This allows __aeabi_memclr to tail-call __aeabi_memset
*********************************************************************************************************/
/*********************************************************************************************************
** 函数名称: __aeabi_memset8
** 功能描述: lib_memset
** 输　入  : dest      目标
**           n         个数
**           c         数据
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memset8 (void *dest, size_t n, int c) 
{
    lib_memset(dest, c, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memset4
** 功能描述: lib_memset
** 输　入  : dest      目标
**           n         个数
**           c         数据
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memset4 (void *dest, size_t n, int c) 
{
    lib_memset(dest, c, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memset
** 功能描述: lib_memset
** 输　入  : dest      目标
**           n         个数
**           c         数据
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memset (void *dest, size_t n, int c) 
{
    lib_memset(dest, c, n);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memclr8
** 功能描述: __aeabi_memset8
** 输　入  : dest      目标
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memclr8 (void *dest, size_t n) 
{
    __aeabi_memset8(dest, n, 0);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memclr4
** 功能描述: __aeabi_memset4
** 输　入  : dest      目标
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memclr4(void *dest, size_t n) 
{
    __aeabi_memset4(dest, n, 0);
}
/*********************************************************************************************************
** 函数名称: __aeabi_memclr
** 功能描述: __aeabi_memset
** 输　入  : dest      目标
**           n         个数
** 输　出  : NONE
** 全局变量: 
** 调用模块: 
*********************************************************************************************************/
void __aeabi_memclr(void *dest, size_t n) 
{
    __aeabi_memset(dest, n, 0);
}
}
/*********************************************************************************************************
  END
*********************************************************************************************************/
